{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e028fe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "21285a39",
   "metadata": {},
   "outputs": [],
   "source": [
    "url = \"https://www.airlinequality.com/airline-reviews/british-airways\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a05c049f",
   "metadata": {},
   "outputs": [],
   "source": [
    "response = requests.get(url)\n",
    "soup = BeautifulSoup(response.content, \"html.parser\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e9216b67",
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews = []\n",
    "review_containers = soup.find_all(\"li\", class_=\"review\")\n",
    "\n",
    "for review in review_containers:\n",
    "    review_text = review.find(\"div\", class_=\"text_content\")\n",
    "    if review_text is not None:\n",
    "        review_text = review_text.get_text(strip=True)\n",
    "    else:\n",
    "        review_text = \"N/A\"\n",
    "    \n",
    "    rating = review.find(\"div\", class_=\"rating-10\")\n",
    "    if rating is not None:\n",
    "        rating = rating.get_text(strip=True)\n",
    "    else:\n",
    "        rating = \"N/A\"\n",
    "    \n",
    "    date = review.find(\"time\", class_=\"review-date\")\n",
    "    if date is not None:\n",
    "        date = date.get(\"datetime\")\n",
    "    else:\n",
    "        date = \"N/A\"\n",
    "    \n",
    "    reviews.append({\"Review\": review_text, \"Rating\": rating, \"Date\": date})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bb63844b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: []\n",
      "Index: []\n"
     ]
    }
   ],
   "source": [
    "df = pd.DataFrame(reviews)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3006046a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scraping page 1\n",
      "   ---> 100 total reviews\n",
      "Scraping page 2\n",
      "   ---> 200 total reviews\n",
      "Scraping page 3\n",
      "   ---> 300 total reviews\n",
      "Scraping page 4\n",
      "   ---> 400 total reviews\n",
      "Scraping page 5\n",
      "   ---> 500 total reviews\n",
      "Scraping page 6\n",
      "   ---> 600 total reviews\n",
      "Scraping page 7\n",
      "   ---> 700 total reviews\n",
      "Scraping page 8\n",
      "   ---> 800 total reviews\n",
      "Scraping page 9\n",
      "   ---> 900 total reviews\n",
      "Scraping page 10\n",
      "   ---> 1000 total reviews\n"
     ]
    }
   ],
   "source": [
    "base_url = \"https://www.airlinequality.com/airline-reviews/british-airways\"\n",
    "pages = 10\n",
    "page_size = 100\n",
    "\n",
    "reviews = []\n",
    "# for i in range(1, pages + 1):\n",
    "for i in range(1, pages + 1):\n",
    "\n",
    "    print(f\"Scraping page {i}\")\n",
    "\n",
    "    # Create URL to collect links from paginated data\n",
    "    url = f\"{base_url}/page/{i}/?sortby=post_date%3ADesc&pagesize={page_size}\"\n",
    "\n",
    "    # Collect HTML data from this page\n",
    "    response = requests.get(url)\n",
    "\n",
    "    # Parse content\n",
    "    content = response.content\n",
    "    parsed_content = BeautifulSoup(content, 'html.parser')\n",
    "    for para in parsed_content.find_all(\"div\", {\"class\": \"text_content\"}):\n",
    "        reviews.append(para.get_text())\n",
    "    \n",
    "    print(f\"   ---> {len(reviews)} total reviews\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c795be21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>✅ Trip Verified | Terrible Experience with Bri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>✅ Trip Verified | An airline that lives in the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>✅ Trip Verified |  Check-in Desk rude and dism...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>✅ Trip Verified | I chose British Airways espe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not Verified | I booked Premium Economy from I...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             reviews\n",
       "0  ✅ Trip Verified | Terrible Experience with Bri...\n",
       "1  ✅ Trip Verified | An airline that lives in the...\n",
       "2  ✅ Trip Verified |  Check-in Desk rude and dism...\n",
       "3  ✅ Trip Verified | I chose British Airways espe...\n",
       "4  Not Verified | I booked Premium Economy from I..."
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame()\n",
    "df[\"reviews\"] = reviews\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bba9d63a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>✅ Trip Verified | Terrible Experience with Bri...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>✅ Trip Verified | An airline that lives in the...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>✅ Trip Verified |  Check-in Desk rude and dism...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>✅ Trip Verified | I chose British Airways espe...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not Verified | I booked Premium Economy from I...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>✅ Trip Verified | \\r\\nBA34 KUL-LHR 6 Sept, ret...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>✅ Trip Verified | We flew from Los Angeles to ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>✅ Trip Verified |  Brindisi to London. Flying ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>✅ Trip Verified |  Chicago to London. I have f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>✅ Trip Verified |  Berlin to London. It was a ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               reviews\n",
       "0    ✅ Trip Verified | Terrible Experience with Bri...\n",
       "1    ✅ Trip Verified | An airline that lives in the...\n",
       "2    ✅ Trip Verified |  Check-in Desk rude and dism...\n",
       "3    ✅ Trip Verified | I chose British Airways espe...\n",
       "4    Not Verified | I booked Premium Economy from I...\n",
       "..                                                 ...\n",
       "995  ✅ Trip Verified | \\r\\nBA34 KUL-LHR 6 Sept, ret...\n",
       "996  ✅ Trip Verified | We flew from Los Angeles to ...\n",
       "997  ✅ Trip Verified |  Brindisi to London. Flying ...\n",
       "998  ✅ Trip Verified |  Chicago to London. I have f...\n",
       "999  ✅ Trip Verified |  Berlin to London. It was a ...\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0be4b2fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviews</th>\n",
       "      <th>Cleaned Reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>✅ Trip Verified | Terrible Experience with Bri...</td>\n",
       "      <td>Trip Verified Terrible Experience with Britis...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>✅ Trip Verified | An airline that lives in the...</td>\n",
       "      <td>Trip Verified An airline that lives in their ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>✅ Trip Verified |  Check-in Desk rude and dism...</td>\n",
       "      <td>Trip Verified Check in Desk rude and dismissi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>✅ Trip Verified | I chose British Airways espe...</td>\n",
       "      <td>Trip Verified I chose British Airways especia...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not Verified | I booked Premium Economy from I...</td>\n",
       "      <td>Not Verified I booked Premium Economy from INV...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             reviews  \\\n",
       "0  ✅ Trip Verified | Terrible Experience with Bri...   \n",
       "1  ✅ Trip Verified | An airline that lives in the...   \n",
       "2  ✅ Trip Verified |  Check-in Desk rude and dism...   \n",
       "3  ✅ Trip Verified | I chose British Airways espe...   \n",
       "4  Not Verified | I booked Premium Economy from I...   \n",
       "\n",
       "                                     Cleaned Reviews  \n",
       "0   Trip Verified Terrible Experience with Britis...  \n",
       "1   Trip Verified An airline that lives in their ...  \n",
       "2   Trip Verified Check in Desk rude and dismissi...  \n",
       "3   Trip Verified I chose British Airways especia...  \n",
       "4  Not Verified I booked Premium Economy from INV...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "# Define a function to clean the text\n",
    "def clean(text):\n",
    "# Removes all special characters and numericals leaving the alphabets\n",
    "    text = re.sub('[^A-Za-z]+', ' ', str(text))\n",
    "    return text\n",
    "\n",
    "# Cleaning the text in the review column\n",
    "df['Cleaned Reviews'] = df['reviews'].apply(clean)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ce9f45f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\aksha\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\aksha\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\aksha\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "\n",
    "\"\"\"This punkt tokenizer divides a text into a list of sentences by using an unsupervised algorithm to build a model for abbreviation words, \n",
    "collocations, and words that start sentences. \"\"\"\n",
    "\n",
    "nltk.download('punkt')\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk import pos_tag\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "nltk.download('wordnet')\n",
    "from nltk.corpus import wordnet\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9353d5a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package omw-1.4 to\n",
      "[nltk_data]     C:\\Users\\aksha\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package omw-1.4 is already up-to-date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     C:\\Users\\aksha\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviews</th>\n",
       "      <th>Cleaned Reviews</th>\n",
       "      <th>POS tagged</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>✅ Trip Verified | Terrible Experience with Bri...</td>\n",
       "      <td>Trip Verified Terrible Experience with Britis...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Terrible, n), (Exp...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>✅ Trip Verified | An airline that lives in the...</td>\n",
       "      <td>Trip Verified An airline that lives in their ...</td>\n",
       "      <td>[(Trip, n), (Verified, v), (airline, n), (live...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>✅ Trip Verified |  Check-in Desk rude and dism...</td>\n",
       "      <td>Trip Verified Check in Desk rude and dismissi...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Check, n), (Desk, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>✅ Trip Verified | I chose British Airways espe...</td>\n",
       "      <td>Trip Verified I chose British Airways especia...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (chose, v), (Britis...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not Verified | I booked Premium Economy from I...</td>\n",
       "      <td>Not Verified I booked Premium Economy from INV...</td>\n",
       "      <td>[(Verified, n), (booked, v), (Premium, n), (Ec...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             reviews  \\\n",
       "0  ✅ Trip Verified | Terrible Experience with Bri...   \n",
       "1  ✅ Trip Verified | An airline that lives in the...   \n",
       "2  ✅ Trip Verified |  Check-in Desk rude and dism...   \n",
       "3  ✅ Trip Verified | I chose British Airways espe...   \n",
       "4  Not Verified | I booked Premium Economy from I...   \n",
       "\n",
       "                                     Cleaned Reviews  \\\n",
       "0   Trip Verified Terrible Experience with Britis...   \n",
       "1   Trip Verified An airline that lives in their ...   \n",
       "2   Trip Verified Check in Desk rude and dismissi...   \n",
       "3   Trip Verified I chose British Airways especia...   \n",
       "4  Not Verified I booked Premium Economy from INV...   \n",
       "\n",
       "                                          POS tagged  \n",
       "0  [(Trip, n), (Verified, n), (Terrible, n), (Exp...  \n",
       "1  [(Trip, n), (Verified, v), (airline, n), (live...  \n",
       "2  [(Trip, n), (Verified, n), (Check, n), (Desk, ...  \n",
       "3  [(Trip, n), (Verified, n), (chose, v), (Britis...  \n",
       "4  [(Verified, n), (booked, v), (Premium, n), (Ec...  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#The nltk.corpus package defines a collection of corpus reader classes, which can be used to access the contents of a diverse set of corpora.\n",
    "\n",
    "\n",
    "nltk.download('omw-1.4')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "\n",
    "# POS tagger dictionary\n",
    "pos_dict = {'J':wordnet.ADJ, 'V':wordnet.VERB, 'N':wordnet.NOUN, 'R':wordnet.ADV}\n",
    "def token_stop_pos(text):\n",
    "    tags = pos_tag(word_tokenize(text))\n",
    "    #print(tags)\n",
    "    newlist = []\n",
    "    for word, tag in tags:\n",
    "        if word.lower() not in set(stopwords.words('english')):\n",
    "          newlist.append(tuple([word, pos_dict.get(tag[0])]))\n",
    "          #print(tag[0])\n",
    "          #print(pos_dict.get(tag[0]))\n",
    "    return newlist \n",
    "\n",
    "df['POS tagged'] = df['Cleaned Reviews'].apply(token_stop_pos)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "02dd4323",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviews</th>\n",
       "      <th>Cleaned Reviews</th>\n",
       "      <th>POS tagged</th>\n",
       "      <th>Lemma</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>✅ Trip Verified | Terrible Experience with Bri...</td>\n",
       "      <td>Trip Verified Terrible Experience with Britis...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Terrible, n), (Exp...</td>\n",
       "      <td>Trip Verified Terrible Experience British Ai...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>✅ Trip Verified | An airline that lives in the...</td>\n",
       "      <td>Trip Verified An airline that lives in their ...</td>\n",
       "      <td>[(Trip, n), (Verified, v), (airline, n), (live...</td>\n",
       "      <td>Trip Verified airline live past glory head f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>✅ Trip Verified |  Check-in Desk rude and dism...</td>\n",
       "      <td>Trip Verified Check in Desk rude and dismissi...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Check, n), (Desk, ...</td>\n",
       "      <td>Trip Verified Check Desk rude dismissive Fli...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>✅ Trip Verified | I chose British Airways espe...</td>\n",
       "      <td>Trip Verified I chose British Airways especia...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (chose, v), (Britis...</td>\n",
       "      <td>Trip Verified choose British Airways especia...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not Verified | I booked Premium Economy from I...</td>\n",
       "      <td>Not Verified I booked Premium Economy from INV...</td>\n",
       "      <td>[(Verified, n), (booked, v), (Premium, n), (Ec...</td>\n",
       "      <td>Verified book Premium Economy INV LAX via LH...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             reviews  \\\n",
       "0  ✅ Trip Verified | Terrible Experience with Bri...   \n",
       "1  ✅ Trip Verified | An airline that lives in the...   \n",
       "2  ✅ Trip Verified |  Check-in Desk rude and dism...   \n",
       "3  ✅ Trip Verified | I chose British Airways espe...   \n",
       "4  Not Verified | I booked Premium Economy from I...   \n",
       "\n",
       "                                     Cleaned Reviews  \\\n",
       "0   Trip Verified Terrible Experience with Britis...   \n",
       "1   Trip Verified An airline that lives in their ...   \n",
       "2   Trip Verified Check in Desk rude and dismissi...   \n",
       "3   Trip Verified I chose British Airways especia...   \n",
       "4  Not Verified I booked Premium Economy from INV...   \n",
       "\n",
       "                                          POS tagged  \\\n",
       "0  [(Trip, n), (Verified, n), (Terrible, n), (Exp...   \n",
       "1  [(Trip, n), (Verified, v), (airline, n), (live...   \n",
       "2  [(Trip, n), (Verified, n), (Check, n), (Desk, ...   \n",
       "3  [(Trip, n), (Verified, n), (chose, v), (Britis...   \n",
       "4  [(Verified, n), (booked, v), (Premium, n), (Ec...   \n",
       "\n",
       "                                               Lemma  \n",
       "0    Trip Verified Terrible Experience British Ai...  \n",
       "1    Trip Verified airline live past glory head f...  \n",
       "2    Trip Verified Check Desk rude dismissive Fli...  \n",
       "3    Trip Verified choose British Airways especia...  \n",
       "4    Verified book Premium Economy INV LAX via LH...  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Obtaining the stem words – Lemmatization\n",
    "\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "wordnet_lemmatizer = WordNetLemmatizer()\n",
    "def lemmatize(pos_data):\n",
    "    lemma_rew = \" \"\n",
    "    for word, pos in pos_data:\n",
    "     if not pos:\n",
    "        lemma = word\n",
    "        lemma_rew = lemma_rew + \" \" + lemma\n",
    "     else:\n",
    "        lemma = wordnet_lemmatizer.lemmatize(word, pos=pos)\n",
    "        lemma_rew = lemma_rew + \" \" + lemma\n",
    "    return lemma_rew\n",
    "\n",
    "df['Lemma'] = df['POS tagged'].apply(lemmatize)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "581aff8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: vaderSentiment in c:\\users\\aksha\\anaconda3\\lib\\site-packages (3.3.2)\n",
      "Requirement already satisfied: requests in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from vaderSentiment) (2.28.1)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from requests->vaderSentiment) (2022.12.7)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from requests->vaderSentiment) (3.4)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from requests->vaderSentiment) (2.0.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from requests->vaderSentiment) (1.26.14)\n"
     ]
    }
   ],
   "source": [
    "!pip install vaderSentiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "44deb1b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviews</th>\n",
       "      <th>Cleaned Reviews</th>\n",
       "      <th>POS tagged</th>\n",
       "      <th>Lemma</th>\n",
       "      <th>Sentiment</th>\n",
       "      <th>Analysis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>✅ Trip Verified | Terrible Experience with Bri...</td>\n",
       "      <td>Trip Verified Terrible Experience with Britis...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Terrible, n), (Exp...</td>\n",
       "      <td>Trip Verified Terrible Experience British Ai...</td>\n",
       "      <td>0.8698</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>✅ Trip Verified | An airline that lives in the...</td>\n",
       "      <td>Trip Verified An airline that lives in their ...</td>\n",
       "      <td>[(Trip, n), (Verified, v), (airline, n), (live...</td>\n",
       "      <td>Trip Verified airline live past glory head f...</td>\n",
       "      <td>-0.7351</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>✅ Trip Verified |  Check-in Desk rude and dism...</td>\n",
       "      <td>Trip Verified Check in Desk rude and dismissi...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Check, n), (Desk, ...</td>\n",
       "      <td>Trip Verified Check Desk rude dismissive Fli...</td>\n",
       "      <td>-0.6705</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>✅ Trip Verified | I chose British Airways espe...</td>\n",
       "      <td>Trip Verified I chose British Airways especia...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (chose, v), (Britis...</td>\n",
       "      <td>Trip Verified choose British Airways especia...</td>\n",
       "      <td>-0.8074</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not Verified | I booked Premium Economy from I...</td>\n",
       "      <td>Not Verified I booked Premium Economy from INV...</td>\n",
       "      <td>[(Verified, n), (booked, v), (Premium, n), (Ec...</td>\n",
       "      <td>Verified book Premium Economy INV LAX via LH...</td>\n",
       "      <td>-0.5719</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             reviews  \\\n",
       "0  ✅ Trip Verified | Terrible Experience with Bri...   \n",
       "1  ✅ Trip Verified | An airline that lives in the...   \n",
       "2  ✅ Trip Verified |  Check-in Desk rude and dism...   \n",
       "3  ✅ Trip Verified | I chose British Airways espe...   \n",
       "4  Not Verified | I booked Premium Economy from I...   \n",
       "\n",
       "                                     Cleaned Reviews  \\\n",
       "0   Trip Verified Terrible Experience with Britis...   \n",
       "1   Trip Verified An airline that lives in their ...   \n",
       "2   Trip Verified Check in Desk rude and dismissi...   \n",
       "3   Trip Verified I chose British Airways especia...   \n",
       "4  Not Verified I booked Premium Economy from INV...   \n",
       "\n",
       "                                          POS tagged  \\\n",
       "0  [(Trip, n), (Verified, n), (Terrible, n), (Exp...   \n",
       "1  [(Trip, n), (Verified, v), (airline, n), (live...   \n",
       "2  [(Trip, n), (Verified, n), (Check, n), (Desk, ...   \n",
       "3  [(Trip, n), (Verified, n), (chose, v), (Britis...   \n",
       "4  [(Verified, n), (booked, v), (Premium, n), (Ec...   \n",
       "\n",
       "                                               Lemma  Sentiment  Analysis  \n",
       "0    Trip Verified Terrible Experience British Ai...     0.8698  Positive  \n",
       "1    Trip Verified airline live past glory head f...    -0.7351  Negative  \n",
       "2    Trip Verified Check Desk rude dismissive Fli...    -0.6705  Negative  \n",
       "3    Trip Verified choose British Airways especia...    -0.8074  Negative  \n",
       "4    Verified book Premium Economy INV LAX via LH...    -0.5719  Negative  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
    "analyzer = SentimentIntensityAnalyzer()\n",
    "\n",
    "\n",
    "# function to calculate vader sentiment\n",
    "def vadersentimentanalysis(review):\n",
    "    vs = analyzer.polarity_scores(review)\n",
    "    return vs['compound']\n",
    "\n",
    "df['Sentiment'] = df['Lemma'].apply(vadersentimentanalysis)\n",
    "\n",
    "# function to analyse\n",
    "def vader_analysis(compound):\n",
    "    if compound >= 0.5:\n",
    "        return 'Positive'\n",
    "    elif compound < 0 :\n",
    "        return 'Negative'\n",
    "    else:\n",
    "        return 'Neutral'\n",
    "df['Analysis'] = df['Sentiment'].apply(vader_analysis)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5c181ddd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reviews</th>\n",
       "      <th>Cleaned Reviews</th>\n",
       "      <th>POS tagged</th>\n",
       "      <th>Lemma</th>\n",
       "      <th>Sentiment</th>\n",
       "      <th>Analysis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>✅ Trip Verified | Terrible Experience with Bri...</td>\n",
       "      <td>Trip Verified Terrible Experience with Britis...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Terrible, n), (Exp...</td>\n",
       "      <td>Trip Verified Terrible Experience British Ai...</td>\n",
       "      <td>0.8698</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>✅ Trip Verified | An airline that lives in the...</td>\n",
       "      <td>Trip Verified An airline that lives in their ...</td>\n",
       "      <td>[(Trip, n), (Verified, v), (airline, n), (live...</td>\n",
       "      <td>Trip Verified airline live past glory head f...</td>\n",
       "      <td>-0.7351</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>✅ Trip Verified |  Check-in Desk rude and dism...</td>\n",
       "      <td>Trip Verified Check in Desk rude and dismissi...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Check, n), (Desk, ...</td>\n",
       "      <td>Trip Verified Check Desk rude dismissive Fli...</td>\n",
       "      <td>-0.6705</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>✅ Trip Verified | I chose British Airways espe...</td>\n",
       "      <td>Trip Verified I chose British Airways especia...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (chose, v), (Britis...</td>\n",
       "      <td>Trip Verified choose British Airways especia...</td>\n",
       "      <td>-0.8074</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Not Verified | I booked Premium Economy from I...</td>\n",
       "      <td>Not Verified I booked Premium Economy from INV...</td>\n",
       "      <td>[(Verified, n), (booked, v), (Premium, n), (Ec...</td>\n",
       "      <td>Verified book Premium Economy INV LAX via LH...</td>\n",
       "      <td>-0.5719</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>✅ Trip Verified | \\r\\nBA34 KUL-LHR 6 Sept, ret...</td>\n",
       "      <td>Trip Verified BA KUL LHR Sept return BA LHR S...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (BA, n), (KUL, n), ...</td>\n",
       "      <td>Trip Verified BA KUL LHR Sept return BA LHR ...</td>\n",
       "      <td>0.9459</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>✅ Trip Verified | We flew from Los Angeles to ...</td>\n",
       "      <td>Trip Verified We flew from Los Angeles to Lee...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (flew, v), (Los, n)...</td>\n",
       "      <td>Trip Verified fly Los Angeles Leeds Bradford...</td>\n",
       "      <td>0.2263</td>\n",
       "      <td>Neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>✅ Trip Verified |  Brindisi to London. Flying ...</td>\n",
       "      <td>Trip Verified Brindisi to London Flying from ...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Brindisi, n), (Lon...</td>\n",
       "      <td>Trip Verified Brindisi London Flying airport...</td>\n",
       "      <td>0.3612</td>\n",
       "      <td>Neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>✅ Trip Verified |  Chicago to London. I have f...</td>\n",
       "      <td>Trip Verified Chicago to London I have flown ...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Chicago, n), (Lond...</td>\n",
       "      <td>Trip Verified Chicago London fly long haul m...</td>\n",
       "      <td>0.5988</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>✅ Trip Verified |  Berlin to London. It was a ...</td>\n",
       "      <td>Trip Verified Berlin to London It was a conne...</td>\n",
       "      <td>[(Trip, n), (Verified, n), (Berlin, n), (Londo...</td>\n",
       "      <td>Trip Verified Berlin London connecting fligh...</td>\n",
       "      <td>0.2991</td>\n",
       "      <td>Neutral</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               reviews  \\\n",
       "0    ✅ Trip Verified | Terrible Experience with Bri...   \n",
       "1    ✅ Trip Verified | An airline that lives in the...   \n",
       "2    ✅ Trip Verified |  Check-in Desk rude and dism...   \n",
       "3    ✅ Trip Verified | I chose British Airways espe...   \n",
       "4    Not Verified | I booked Premium Economy from I...   \n",
       "..                                                 ...   \n",
       "995  ✅ Trip Verified | \\r\\nBA34 KUL-LHR 6 Sept, ret...   \n",
       "996  ✅ Trip Verified | We flew from Los Angeles to ...   \n",
       "997  ✅ Trip Verified |  Brindisi to London. Flying ...   \n",
       "998  ✅ Trip Verified |  Chicago to London. I have f...   \n",
       "999  ✅ Trip Verified |  Berlin to London. It was a ...   \n",
       "\n",
       "                                       Cleaned Reviews  \\\n",
       "0     Trip Verified Terrible Experience with Britis...   \n",
       "1     Trip Verified An airline that lives in their ...   \n",
       "2     Trip Verified Check in Desk rude and dismissi...   \n",
       "3     Trip Verified I chose British Airways especia...   \n",
       "4    Not Verified I booked Premium Economy from INV...   \n",
       "..                                                 ...   \n",
       "995   Trip Verified BA KUL LHR Sept return BA LHR S...   \n",
       "996   Trip Verified We flew from Los Angeles to Lee...   \n",
       "997   Trip Verified Brindisi to London Flying from ...   \n",
       "998   Trip Verified Chicago to London I have flown ...   \n",
       "999   Trip Verified Berlin to London It was a conne...   \n",
       "\n",
       "                                            POS tagged  \\\n",
       "0    [(Trip, n), (Verified, n), (Terrible, n), (Exp...   \n",
       "1    [(Trip, n), (Verified, v), (airline, n), (live...   \n",
       "2    [(Trip, n), (Verified, n), (Check, n), (Desk, ...   \n",
       "3    [(Trip, n), (Verified, n), (chose, v), (Britis...   \n",
       "4    [(Verified, n), (booked, v), (Premium, n), (Ec...   \n",
       "..                                                 ...   \n",
       "995  [(Trip, n), (Verified, n), (BA, n), (KUL, n), ...   \n",
       "996  [(Trip, n), (Verified, n), (flew, v), (Los, n)...   \n",
       "997  [(Trip, n), (Verified, n), (Brindisi, n), (Lon...   \n",
       "998  [(Trip, n), (Verified, n), (Chicago, n), (Lond...   \n",
       "999  [(Trip, n), (Verified, n), (Berlin, n), (Londo...   \n",
       "\n",
       "                                                 Lemma  Sentiment  Analysis  \n",
       "0      Trip Verified Terrible Experience British Ai...     0.8698  Positive  \n",
       "1      Trip Verified airline live past glory head f...    -0.7351  Negative  \n",
       "2      Trip Verified Check Desk rude dismissive Fli...    -0.6705  Negative  \n",
       "3      Trip Verified choose British Airways especia...    -0.8074  Negative  \n",
       "4      Verified book Premium Economy INV LAX via LH...    -0.5719  Negative  \n",
       "..                                                 ...        ...       ...  \n",
       "995    Trip Verified BA KUL LHR Sept return BA LHR ...     0.9459  Positive  \n",
       "996    Trip Verified fly Los Angeles Leeds Bradford...     0.2263   Neutral  \n",
       "997    Trip Verified Brindisi London Flying airport...     0.3612   Neutral  \n",
       "998    Trip Verified Chicago London fly long haul m...     0.5988  Positive  \n",
       "999    Trip Verified Berlin London connecting fligh...     0.2991   Neutral  \n",
       "\n",
       "[1000 rows x 6 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9aef4b57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Positive    497\n",
       "Negative    395\n",
       "Neutral     108\n",
       "Name: Analysis, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vader_counts = df['Analysis'].value_counts()\n",
    "vader_counts\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1a930e9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.patches.Wedge at 0x195b2d98f70>,\n",
       "  <matplotlib.patches.Wedge at 0x195b2d58070>,\n",
       "  <matplotlib.patches.Wedge at 0x195b2d99c60>],\n",
       " [Text(0.01036707179294032, 1.0999511461071534, 'Positive'),\n",
       "  Text(-0.3758612265358838, -1.0337931796964717, 'Negative'),\n",
       "  Text(1.2730372826016982, -0.44930621752440103, 'Neutral')],\n",
       " [Text(0.005654766432512902, 0.5999733524220836, '49.7%'),\n",
       "  Text(-0.20501521447411838, -0.5638871889253481, '39.5%'),\n",
       "  Text(0.8015419927492173, -0.2828965073301784, '10.8%')])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "plt.figure(figsize=(15,7))\n",
    "\n",
    "plt.subplot(1,3,2)\n",
    "plt.title(\"Reviews Analysis\")\n",
    "plt.pie(vader_counts.values, labels = vader_counts.index, explode = (0, 0, 0.25), autopct='%1.1f%%', shadow=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a0eff11d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wordcloud in c:\\users\\aksha\\anaconda3\\lib\\site-packages (1.9.2)\n",
      "Requirement already satisfied: numpy>=1.6.1 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from wordcloud) (1.23.5)\n",
      "Requirement already satisfied: matplotlib in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from wordcloud) (3.7.0)\n",
      "Requirement already satisfied: pillow in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from wordcloud) (9.4.0)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (2.8.2)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (4.25.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (1.0.5)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (1.4.4)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (3.0.9)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (22.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from matplotlib->wordcloud) (0.11.0)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\aksha\\anaconda3\\lib\\site-packages (from python-dateutil>=2.7->matplotlib->wordcloud) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install wordcloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "03af5f5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from wordcloud import WordCloud, STOPWORDS\n",
    "stopwords = set(STOPWORDS)\n",
    "\n",
    "def show_wordcloud(data):\n",
    "    wordcloud = WordCloud(\n",
    "        background_color='white',\n",
    "        stopwords=stopwords,\n",
    "        max_words=100,\n",
    "        max_font_size=30,\n",
    "        scale=3,\n",
    "        random_state=1)\n",
    "\n",
    "    wordcloud=wordcloud.generate(str(data))\n",
    "\n",
    "    fig = plt.figure(1, figsize=(10, 10))\n",
    "    plt.axis('off')\n",
    "\n",
    "    plt.imshow(wordcloud)\n",
    "    plt.show()\n",
    "\n",
    "show_wordcloud(df.Lemma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f0bf1376",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv(\"BA_reviews.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fecd3069",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2aa9a4e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
